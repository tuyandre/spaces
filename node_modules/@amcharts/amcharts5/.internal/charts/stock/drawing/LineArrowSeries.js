import { SimpleLineSeries } from "./SimpleLineSeries";
import * as $math from "../../../core/util/Math";
import { ListTemplate } from "../../../core/util/List";
import { Triangle } from "../../../core/render/Triangle";
import { Template } from "../../../core/util/Template";
/**
 * Used for Line Arrow drawing tool in [[StockChart]].
 *
 * @since 5.10.5
 */
export class LineArrowSeries extends SimpleLineSeries {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "_arrows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "arrows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), () => Triangle._new(this._root, { themeTags: ["arrow"] }, [this.arrows.template]))
        });
    }
    _afterNew() {
        super._afterNew();
        this.lines.template.set("forceHidden", true);
    }
    /**
     * @ignore
     */
    makeArrow() {
        const arrow = this.arrows.make();
        this.mainContainer.children.push(arrow);
        this.arrows.push(arrow);
        return arrow;
    }
    _createElements(index) {
        super._createElements(index);
        if (!this._arrows[index]) {
            const arrow = this.makeArrow();
            this._arrows[index] = arrow;
            let color = this.get("strokeColor", this.get("stroke"));
            if (color) {
                arrow.set("fill", color);
            }
        }
    }
    _updateLine(index, p11, p22, p1, p2) {
        super._updateLine(index, p11, p22, p1, p2);
        const arrow = this._arrows[index];
        let angle = Math.atan2(p2.y - p1.y, p2.x - p1.x);
        // point by 11 pixels back on a line
        const p1x = p2.x - 11 * Math.cos(angle);
        const p1y = p2.y - 11 * Math.sin(angle);
        arrow.setAll({
            x: p1x,
            y: p1y,
            rotation: $math.DEGREES * angle + 90
        });
    }
}
Object.defineProperty(LineArrowSeries, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LineArrowSeries"
});
Object.defineProperty(LineArrowSeries, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: SimpleLineSeries.classNames.concat([LineArrowSeries.className])
});
//# sourceMappingURL=LineArrowSeries.js.map